-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | 9 letter word puzzle solver
--   
--   Solve a common 9 letter word puzzle. This will list all words matching
--   the 9 letters and must include a mandatory character.
@package wordpuzzle
@version 2.5.0


-- | Supporting functions for solving letter word puzzles.
--   
--   <h2>Notes</h2>
--   
--   Is functions return a boolean:
--   
--   <pre>
--   isXyz :: a -&gt; Bool
--   </pre>
--   
--   Check functions return an <a>Either</a>:
--   
--   <pre>
--   checkXyz :: a -&gt; Either Error a
--   </pre>
--   
--   TODO Update validation to return a List of errors:
--   
--   <pre>
--   validateXyz :: a -&gt; Validation [Error] a
--   </pre>
module WordPuzzle

-- | Represent parameters required for the puzzle.
data WordPuzzle

-- | Smart constructor for WordPuzzle.
--   
--   TODO re-write using accumulative validation
--   
--   See
--   <a>https://github.com/system-f/validation/blob/master/examples/src/Email.hs</a>
makeWordPuzzle :: Int -> String -> FilePath -> Either ValidationError WordPuzzle

-- | Check that mandatory value is in the range from 1 to 9.
--   
--   <pre>
--   &gt;&gt;&gt; checkSize 10
--   Left (InvalidSize 10)
--   </pre>
--   
--   <pre>
--   &gt;&gt;&gt; checkSize 1
--   Right 1
--   </pre>
checkSize :: Int -> Either String Int

-- | Check that letters are lowercase alphabetic characters.
checkLetters :: String -> Either String String

-- | Check if a word contains only characters from a letters list.
--   
--   <ul>
--   <li>If all valid characters are removed from the word, and there are
--   still characters left over, then the word is not valid.</li>
--   <li>If all valid characters are removed from the word, and the word is
--   empty, then the word is valid.</li>
--   </ul>
hasLetters :: String -> String -> Bool

-- | Solve word puzzle given a dictionary of words.
--   
--   Where each word:
--   
--   <ul>
--   <li>must be greater than the minimum word length</li>
--   <li>must be no more than 9 characters long</li>
--   <li>must contain mandatory character</li>
--   <li>must contain only valid characters</li>
--   <li>must not exceed valid character frequency</li>
--   </ul>
solve :: WordPuzzle -> IO ()

-- | Error given on invalid parameter.
data ValidationError

-- | bad size integer
InvalidSize :: Int -> ValidationError

-- | bad letters
InvalidLetters :: String -> ValidationError

-- | couldn't parse value
UnexpectedValue :: String -> ValidationError
instance GHC.Show.Show WordPuzzle.WordPuzzle
instance GHC.Show.Show WordPuzzle.ValidationError
