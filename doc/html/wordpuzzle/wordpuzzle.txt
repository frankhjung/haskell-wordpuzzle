-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | 9 letter word puzzle solver
--   
--   Solve a common 9 letter word puzzle. This will list all words matching
--   the 9 letters and must include a mandatory character.
@package wordpuzzle
@version 1.1.0


-- | Supporting functions for solving letter word puzzles.
--   
--   <h2>Notes</h2>
--   
--   Is functions return a boolean:
--   
--   <pre>
--   isXyz :: a -&gt; Bool
--   </pre>
--   
--   Check functions return an <a>Either</a>:
--   
--   <pre>
--   checkXyz :: a -&gt; Either Error a
--   </pre>
--   
--   TODO Validation returns a List of errors:
--   
--   <pre>
--   validateXyz :: a -&gt; Validation [Error] a
--   </pre>
module WordPuzzle

-- | Represent parameters required for the puzzle.
data WordPuzzle

-- | Smart constructor for WordPuzzle. TODO re-write using accumulative
--   validation
makeWordPuzzle :: Int -> Char -> String -> FilePath -> Either ValidationError WordPuzzle

-- | Check that mandatory value is in the range from 1 to 9.
checkSize :: Int -> Either String Int

-- | Check that letters are lowercase alphabetic characters.
checkLetters :: String -> Either String String

-- | Check that mandatory letter. TODO Can we use isMandatory here? It will
--   require an extra parameter, which is not available by the parser.
checkMandatory :: String -> Either String Char

-- | Check if a word contains only characters from a list.
--   
--   <ul>
--   <li>If all valid characters are removed from the word, and there are
--   still characters left over, then the word is not valid.</li>
--   <li>If all valid characters are removed from the word, and the word is
--   empty, then the word is valid.</li>
--   </ul>
isWord :: String -> String -> Bool

-- | Solve word puzzle.
--   
--   Print words to stdout.
solve :: WordPuzzle -> IO ()

-- | Error given on invalid parameter.
data ValidationError

-- | bad size integer
InvalidSize :: Int -> ValidationError

-- | bad mandatory character
InvalidMandatory :: Char -> ValidationError

-- | bad letters
InvalidLetters :: String -> ValidationError

-- | couldn't parse value
UnexpectedValue :: String -> ValidationError
instance GHC.Classes.Eq WordPuzzle.ValidationError
instance GHC.Show.Show WordPuzzle.WordPuzzle
instance GHC.Show.Show WordPuzzle.ValidationError
